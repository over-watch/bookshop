<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/context 
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<!-- 
		1:搭建Spring的开发环境
			1.1 添加配置文件，和相应的spring-4.0-core.jar包
			1.2 创建Date对象，如果成功则Spring的环境OK
			1.3 通过基于Spring Junit测试实例化Date
			
		2：搭建Hibernate的开发环境
			2.1 添加配置文件，和相应的Hibernate3.6.jar+mysql驱动包
			2.2 分析cn.it.shop.util。HibernateSessionFactory.java的作用：加载Hibernate配置文件，创建session
			2.3 通过逆向生成model、orm映射文件
			2.4 创建Service，通过new方式执行数据入库，在JEE6中会出现Unable to get the default Bean Validate factory
				解决方案：在Hibernate配置文件中：<property name="javax.persistence.validation.mode">none</property>
		3:Spring与Hibernate整合(采用AOP来管理事务实现声明式事务)
			3.1	添加：spring-3.2-aop.jar、spring-3.2-presistence和c3p0-0.9.jar
			3.2	配置数据源
			3.3 采用LocalSessionFactoryBean取代：HibernateTemplate
			3.4 配置事务管理器，管理SessionFactory,这样所有的session将会有声明式事务
			3.5 配置advice（通知）,
			3.6 配置aop切面表达式
			3.7 让Service交给Spring管理，并且依赖sessionFactory，如果能插入数据，说明事务OK
		4:搭建Struts的开发环境
			4.1 添加配置文件，并且在web.xml中StrutsPrepareAndExecuteFilter
			4.2 创建Action，并且配置到struts.xml中
			4.3 通过jsp访问Action，如果Action可以创建，则代表环境OK
			4.4 默认在没有整合的时候创建Action的工厂为：(struts) for (com.opensymphony.xwork2.ObjectFactory)
		5： 创建Spring与Struts整合环境（采用Spring来管理Action，这样Action的依赖就能注入进来）
			5.1 添加spring-web.jar 和struts2-spring-plugin-2.3.14.3.jar
			5.2 把Action和它的依赖交给Spring管理
			5.3 在Struts.xml中class对应的是spring中配置action的id值
			5.4 web.xml中配置监听器ContextLoaderListener，启动的时候加载Spring配置文件
				Choosing bean (spring) for (com.opensymphony.xwork2.ObjectFactory)
	 -->
	 <context:component-scan base-package="cn.it.shop.." />
	 <!-- 所有的Properties文件应该交给sring管理，而且在启动的时候加载
	 Spring支持两种方式，property-placeholder仅仅在XML中使用 -->
	<!--  <context:property-placeholder location="classpath:conn.properties"/> -->
	 
	 <bean  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	 	<property name="locations">
	 		<array>
	 			<value>classpath:conn.properties</value>
	 		</array>
	 	</property>
	 </bean>
	 <!-- 仅仅支持注解的方式注入 -->
	  <bean id="prop" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	 	<property name="locations">
	 		<array>
	 			<value>classpath:public.properties</value>
	 			<value>classpath:pay.properties</value>
	 		</array>
	 	</property>
	 </bean>
	<bean id="dataSource" class="${dataSource}">
		<property name="driverClass" value="${driverClass}" />
		<property name="jdbcUrl" value="${jdbcUrl}"/>
		<property name="user" value="${user}" />
		<property name="password" value="${password}" />
	</bean>	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
	</bean>
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:advice id="adivce" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save" propagation="REQUIRED"/>
			<tx:method name="update" propagation="REQUIRED"/>
			<tx:method name="delete" propagation="REQUIRED"/>
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>		
		<!-- 配置哪些包的类要切入事务 -->
		<aop:pointcut expression="execution(* cn.it.shop.service.impl.*.*(..))" id="pointcut"/>
		<!-- 通知+切面表达式，才是完整的切入路径 -->
		<aop:advisor advice-ref="adivce" pointcut-ref="pointcut"/>
	</aop:config>
	</beans>